{"version":3,"file":"static/js/786.00addb66.chunk.js","mappings":"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","sources":["page/SearchPlaylist/Navigation.tsx","page/SearchPlaylist/endpoints.ts","page/SearchPlaylist/LoadPlaylist.tsx","page/SearchPlaylist/ViewLyricsModal.tsx","page/SearchPlaylist/ListSongs.tsx","page/SearchPlaylist/EstimatedTimeRemaining.tsx","page/SearchPlaylist/SearchKeywords.tsx","page/SearchPlaylist/SearchPlaylistDetails.tsx","page/SearchPlaylist/DisplayPlaylistDetails.tsx","utils/reactStringReplace.ts","page/SearchPlaylist/SnippetContent.tsx","page/SearchPlaylist/SearchResults.tsx","page/SearchPlaylist/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport {useNavigate, useNavigationType} from 'react-router-dom';\r\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack';\r\nimport Button from '@mui/material/Button';\r\nimport Tooltip from '@mui/material/Tooltip';\r\n\r\n\r\nfunction Navigation(): JSX.Element {\r\n\r\n    const navigateHook = useNavigate();\r\n    const navigationType = useNavigationType();\r\n\r\n    const GoBack = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n        event.preventDefault();\r\n        \r\n        // Check navigation type. \r\n        // PUSH means the user came here programmatically without contacting the server\r\n        if (navigationType == \"PUSH\") {\r\n            // Go back\r\n            navigateHook(-1)\r\n        } else {\r\n            navigateHook(\"/\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Tooltip title=\"Go to home page\" placement=\"right\">\r\n            <Button\r\n                startIcon={<ArrowBackIcon/>}\r\n                onClick={GoBack}\r\n                sx={(theme) => ({backgroundImage: `linear-gradient(120deg, ${theme.palette.primary.light}, ${theme.palette.secondary.dark})`})}\r\n                variant=\"contained\"\r\n            >Home</Button>\r\n        </Tooltip>\r\n    )\r\n}\r\n\r\nexport default Navigation;","export const API_WEBSITE = \"https://lyrics-finder-02nb.onrender.com/\";\r\nexport const LOAD_PLAYLIST_ENDPOINT = \"/lyrics-finder-api/load-playlist/\";\r\nexport const SEARCH_PLAYLIST_ENDPOINT = \"/lyrics-finder-api/search-playlist/\";\r\nexport const GET_GENIUS_RESPONSE_TIME = \"/lyrics-finder-api/get-genius-response-time/\";\r\nexport const LOAD_COMPLETE_PLAYLIST_ENDPOINT = \"/lyrics-finder-api/load-complete-playlist/\";\r\nexport const SCAN_SONG_ENDPOINT = \"/lyrics-finder-api/scan-song/\";\r\nexport const GET_LYRICS_ENDPOINT = \"/lyrics-finder-api/get-lyrics/\";","import * as React from 'react';\r\nimport {_parseGetQueryToURLQuery, QueryObject, onEnter} from '../../utils';\r\nimport {API_WEBSITE, LOAD_COMPLETE_PLAYLIST_ENDPOINT} from './endpoints';\r\nimport {SnackbarStateInterface} from './index';\r\nimport { useTheme, SxProps } from '@mui/material/styles';\r\nimport { LoadCompletePlaylistAPIResponse } from './api_response_types';\r\n// MUI components\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport SystemUpdateAltIcon from '@mui/icons-material/SystemUpdateAlt';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Button from '@mui/material/Button';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n\r\n\r\ninterface LoadPlaylistProps {\r\n    playlistURL: string;\r\n    setPlaylistURL: React.Dispatch<React.SetStateAction<string>>;\r\n    showSnackbar: (P: Partial<SnackbarStateInterface>) => void;\r\n    setCompletePlaylistDetails: React.Dispatch<React.SetStateAction<LoadCompletePlaylistAPIResponse>>;\r\n}\r\n\r\n/* \r\n This is the LoadPlaylist step in the 3 steps\r\n*/\r\nfunction LoadPlaylist(props: LoadPlaylistProps): JSX.Element {\r\n    /**\r\n     * This functional component is the first step of the SearchPlaylist process\r\n     * This component mainly serves the purpose of a very comprehensive TextField\r\n     * The TextField state is stored in the parent component. \r\n     */\r\n    const {playlistURL, setPlaylistURL, showSnackbar, setCompletePlaylistDetails} = props;\r\n    \r\n\r\n    // Whenever a request is in progress\r\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\r\n\r\n    // Fix memory leak - This component is unmounted but setIsLoading is still called in a promise afterwards\r\n    React.useEffect(() => {\r\n\r\n        // componentWillUnmount\r\n        return () => {\r\n            setIsLoading(false); \r\n        }\r\n    }, [])\r\n\r\n    // use theme to update button styling based on if it is currently loading\r\n    const AppTheme = useTheme();\r\n    const LoadingButtonSx : SxProps = {\r\n        // If it is not loading\r\n        ...(!isLoading && {\r\n            backgroundImage: `linear-gradient(120deg, ${AppTheme.palette.success.light}, ${AppTheme.palette.success.dark})`\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    // Execute load button event\r\n    function loadPlaylist<T extends React.MouseEvent | React.KeyboardEvent> (event: T) {\r\n\r\n        event.preventDefault();\r\n        \r\n        setIsLoading(true);\r\n\r\n        // The get parameters\r\n        const QUERY: QueryObject = {\r\n            url: `${playlistURL}`\r\n        }\r\n        // Convery query from an object to a url string\r\n        const _query: string = _parseGetQueryToURLQuery(QUERY);\r\n        \r\n        const URL = `${API_WEBSITE}${LOAD_COMPLETE_PLAYLIST_ENDPOINT}?${_query}`;\r\n\r\n        // Send the fetch request\r\n        fetch(URL, {\r\n            method: \"GET\",\r\n            mode: \"cors\"\r\n        })\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            // Successfully received a response from server\r\n            if (response.status === 200) {\r\n                // Successfully received data\r\n                setCompletePlaylistDetails(response as LoadCompletePlaylistAPIResponse);\r\n                showSnackbar({\r\n                    message: response.message,\r\n                    severity: \"success\"\r\n                })\r\n            } else {\r\n                showSnackbar({\r\n                    message: response.message,\r\n                    severity: \"error\"\r\n                })\r\n            }\r\n        })\r\n        .catch(e => {\r\n            // Fetch was rejected/unable to connect to server\r\n            showSnackbar({\r\n                message: \"Failed to connect to server\",\r\n                severity: \"error\"\r\n            })\r\n        })\r\n        .finally(() => {\r\n            setIsLoading(false);\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {/* Input */}\r\n            <TextField\r\n                value={playlistURL}\r\n                onChange={(e) => setPlaylistURL(e.target.value)}\r\n                placeholder=\"Enter a spotify playlist URL\"\r\n                fullWidth\r\n                sx={{\r\n                    my: 2,\r\n                    '& .MuiOutlinedInput-root': {\r\n                        borderRadius: 8,\r\n                        paddingLeft: 2\r\n                    }\r\n                }}\r\n                InputProps={{\r\n                    startAdornment: (\r\n                        <InputAdornment position='start'><SearchIcon/></InputAdornment>\r\n                    )\r\n                }}\r\n                onKeyDown={onEnter((e) => { loadPlaylist(e) })}\r\n            />\r\n\r\n            {/* Button and loading animation */}\r\n            <Box sx={{position: \"relative\"}}>\r\n                <Button\r\n                    variant='contained'\r\n                    color='success'\r\n                    sx={LoadingButtonSx}\r\n                    fullWidth\r\n                    startIcon={<SystemUpdateAltIcon/>}\r\n                    onClick={loadPlaylist}\r\n                    disabled={isLoading}\r\n                >Load playlist</Button>\r\n\r\n                {\r\n                    isLoading && (\r\n                        <CircularProgress \r\n                            color=\"secondary\"\r\n                            size={24}\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                top: \"50%\",\r\n                                left: \"50%\",\r\n                                marginTop: \"-12px\",\r\n                                marginLeft: \"-12px\"\r\n                            }}\r\n                        />\r\n                    )\r\n                }\r\n            </Box>\r\n\r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default LoadPlaylist;","import React, {useState, useEffect} from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport Divider from '@mui/material/Divider';\r\nimport MusicNoteIcon from '@mui/icons-material/MusicNote';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport LyricsIcon from '@mui/icons-material/Lyrics';\r\nimport Skeleton from '@mui/material/Skeleton';\r\nimport Link from '@mui/material/Link';\r\n/* API imports */\r\nimport { API_WEBSITE, GET_LYRICS_ENDPOINT } from './endpoints';\r\nimport { GetLyricsAPIResponse } from './api_response_types';\r\n/* Utility imports */\r\nimport _parseGetQueryToURLQuery, {QueryObject} from '../../utils/_parseGetQueryToURLQuery';\r\n\r\n// Function props\r\ninterface ViewLyricsModalProps {\r\n    songName: string;\r\n    artists: string;\r\n}\r\n\r\nfunction ViewLyricsModal(props: ViewLyricsModalProps): JSX.Element {\r\n    /**\r\n     * This functional component is the ViewLyrics component for each song \r\n     * It serves the purpose of using the fetch API to get the lyrics of songs\r\n     * ONLY when the modal is opened\r\n     */\r\n    \r\n    const {songName, artists} = props;\r\n\r\n    // The modal states \r\n    const [modal, setModal] = useState<boolean>(false);\r\n\r\n    /* When the component <ViewLyricsModal> is mounted initially don't do anything.\r\n     * When the modal is opened, only then go and fetch the lyrics\r\n    */\r\n    const [isLyricsLoaded, setIsLyricsLoaded] = useState<boolean>(false);\r\n    const [lyrics, setLyrics] = useState<undefined | string>(undefined);\r\n    const [geniusURL, setGeniusURL] = useState<undefined | string>(undefined);\r\n\r\n    // When the modal is opened, and lyrics is not loaded, go and fetch lyrics\r\n    useEffect(() => {\r\n        // ONLY IF LYRICS IS NOT LOADED AND MODAL IS OPEN\r\n        if (!isLyricsLoaded && modal) {\r\n            // Generate query\r\n            const _Q: QueryObject = {\r\n                songname: songName,\r\n                artists: artists\r\n            };\r\n\r\n            const query: string = _parseGetQueryToURLQuery(_Q);\r\n\r\n            const URL = `${API_WEBSITE}${GET_LYRICS_ENDPOINT}?${query}`;\r\n\r\n            fetch(URL, {\r\n                mode: \"cors\",\r\n                method: \"GET\",\r\n            })\r\n            .then((response) => response.json())\r\n            .then((response: GetLyricsAPIResponse) => {\r\n                if (response.status === 200 && typeof response.data !== 'undefined') {\r\n                    // Response was successfull\r\n                    setLyrics(response.data?.lyrics);\r\n                    setGeniusURL(response.data?.geniusURL);\r\n                } else {\r\n                    // Otherwise just display an error\r\n                    setLyrics(\"Error: Unable to load lyrics.\");\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                setLyrics(\"Error: An unexpected error occured.\");\r\n            })\r\n            .finally(() => {\r\n                setIsLyricsLoaded(true);\r\n            })\r\n        }\r\n    }, [modal]);\r\n\r\n    // Handle close\r\n    const handleClose = () => { setModal(false); };\r\n\r\n    return (\r\n        <>\r\n        {/* The view lyrics button to open the dialog */}\r\n        <Box>\r\n            <Button\r\n                startIcon={<LyricsIcon />}\r\n                sx={{\r\n                    backgroundColor: \"#767676\",\r\n                    \":hover\": {\r\n                        backgroundColor: \"#515151\"\r\n                    }\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={() => { setModal(true); }}\r\n            >View lyrics</Button>\r\n        </Box>\r\n        \r\n        {/* The modal dialog */}\r\n        <Dialog \r\n            open={modal}\r\n            onClose={handleClose}\r\n            fullWidth={true}\r\n            maxWidth=\"lg\"\r\n        >\r\n            <Box sx={{p: 3}}>\r\n                {/* Title */}\r\n                <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" >\r\n                    <MusicNoteIcon/>\r\n                    <Typography variant=\"h4\" sx={{ml: 1}}>Lyrics</Typography>\r\n                    <Box flexGrow={1} />\r\n                    <IconButton onClick={handleClose} ><CloseIcon/></IconButton>\r\n                </Box>\r\n                 \r\n                {Boolean(geniusURL) && <Typography variant=\"caption\" color=\"textSecondary\">Source: <Link href={geniusURL} target=\"_blank\">Genius.com</Link></Typography>}\r\n                \r\n                <Divider sx={{mt: 1, mb: 2}} />\r\n                {/* Song name */}\r\n                <Typography variant=\"h5\" textAlign=\"center\" sx={{my: 1}}>{songName} - {artists}</Typography>\r\n\r\n                {/* Skeleton */}\r\n                {!isLyricsLoaded && [1,2,3].map((e, i) => (\r\n                    <Box key={i}>\r\n                        <Skeleton animation=\"wave\" height={26} width={150} />\r\n                        <Skeleton animation=\"wave\" height={26} width={350} />\r\n                        <Skeleton animation=\"wave\" height={26} width={400} />\r\n                        <Skeleton animation=\"wave\" height={26} width={350} />\r\n                        <Skeleton animation=\"wave\" height={26} width={400} />\r\n                        <br/>\r\n                    </Box>\r\n                ))}\r\n\r\n                 \r\n                {/* Lyrics */}\r\n                {isLyricsLoaded && <Box sx={{backgroundColor: \"#E3E3E3\", p: 1}}>\r\n                    {\r\n                        typeof lyrics === 'string' && lyrics.split(\"\\n\").map((e, i) => {\r\n                            if (e === \"\") {\r\n                                return <br key={i}/>\r\n                            } else {\r\n                                return <Typography key={i}>{e}</Typography>\r\n                            }\r\n                        })\r\n                    }\r\n                </Box>}\r\n\r\n                {/* Close button */}\r\n                <Divider sx={{my: 1}} />\r\n                <Button color=\"primary\" onClick={handleClose}>Close</Button>\r\n                \r\n            </Box>\r\n        </Dialog>\r\n\r\n        </>\r\n    )\r\n};\r\n\r\nexport default ViewLyricsModal;","import * as React from 'react';\r\n// Page components\r\nimport { PlaylistItems } from './api_response_types';\r\n// MUI components\r\nimport Box from '@mui/material/Box';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Typography from '@mui/material/Typography';\r\nimport GREY from '@mui/material/colors/grey';\r\nimport Divider from '@mui/material/Divider';\r\nimport Button from '@mui/material/Button';\r\nimport Icon from '@mui/material/Icon';\r\nimport ViewLyricsModal from './ViewLyricsModal';\r\n\r\n// The list songs props types\r\ninterface ListSongsProps {\r\n    items: PlaylistItems[];\r\n};\r\n\r\n// The list songs component\r\nfunction ListSongs(props: ListSongsProps) {\r\n    /* \r\n    The functional componenet which renders all the list of songs \r\n    When the playlist details is loaded.\r\n    */\r\n    \r\n    const {items} = props;\r\n\r\n    return (\r\n        <Box my={1}>\r\n            <List\r\n                sx={{\r\n                    width: \"100%\",\r\n                    border: `1px solid ${GREY[\"300\"]}`,\r\n                    py: 1\r\n                }}\r\n                disablePadding\r\n            >\r\n            {\r\n                items.map((each, i) => (\r\n                    <ListItem alignItems=\"flex-start\" key={i} sx={{py: 0}}>\r\n                        {/* Avatar */}\r\n                        <ListItemAvatar>\r\n                            <Avatar alt=\"Song cover photo\" src={each.imageURL} variant=\"square\" />\r\n                        </ListItemAvatar>\r\n                        {/* Content */}\r\n                        <ListItemText>\r\n                            <>\r\n                            <Typography>{each.name}</Typography>\r\n                            <Typography variant=\"body2\" color=\"textSecondary\">{each.artists}</Typography>\r\n                            \r\n                            {/* Buttons */}\r\n                            {/* Listen to spotify button */}\r\n                            <Box my={1}>\r\n                                <Button\r\n                                    startIcon={<Icon className=\"fab fa-spotify\" />}\r\n                                    sx={{\r\n                                        backgroundColor: \"#1db954\",\r\n                                        ':hover': {\r\n                                            backgroundColor: \"#13823A\"\r\n                                        }\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    href={each.url}\r\n                                    target=\"_blank\"\r\n                                >\r\n                                    Listen on Spotify\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            {/* View Lyrics component */}\r\n                            <ViewLyricsModal\r\n                                songName={each.name}\r\n                                artists={each.artists}\r\n                            />\r\n\r\n                            \r\n                            {(i !== (items.length-1) && <Divider sx={{mt: 2}} />)}\r\n                            </>\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                ))\r\n            }\r\n            </List>\r\n        </Box>\r\n    )\r\n};\r\n\r\nexport default ListSongs;","import * as React from 'react';\r\n// Mui components\r\nimport Box from '@mui/material/Box';\r\nimport LinearProgress, { linearProgressClasses } from '@mui/material/LinearProgress';\r\nimport {SxProps, useTheme} from '@mui/material/styles';\r\n\r\ninterface EstimatedTimeRemainingProps {\r\n    value?: number;\r\n}\r\n\r\nfunction EstimatedTimeRemaining(props: EstimatedTimeRemainingProps): JSX.Element {\r\n    /* This functional component shows a loading bar when a song is being searched */\r\n    const {value} = props;\r\n\r\n    // Styling\r\n    const theme = useTheme();\r\n    const LoaderStyle: SxProps = {\r\n        height: 10,\r\n        borderRadius: 5,\r\n        [`&.${linearProgressClasses.colorPrimary}`]: {\r\n            backgroundColor: theme.palette.grey[theme.palette.mode === 'light' ? 300 : 800],\r\n        },\r\n        [`& .${linearProgressClasses.bar}`]: {\r\n            borderRadius: 5,\r\n            backgroundColor: theme.palette.mode === 'light' ? '#1a90ff' : '#308fe8',\r\n        },\r\n    } \r\n\r\n    return (\r\n        <Box my={1}>\r\n            {\r\n                value ?\r\n                \r\n                <LinearProgress sx={LoaderStyle} variant=\"determinate\" value={value}/>\r\n                :\r\n                <LinearProgress sx={LoaderStyle} variant=\"indeterminate\"/>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default EstimatedTimeRemaining;","import React, {useState} from 'react';\r\n// MUI components\r\nimport TextField from '@mui/material/TextField';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport {onEnter} from '../../utils';\r\n\r\ninterface SearchKeywordsProps {\r\n    searchPlaylist: <T extends React.MouseEvent | React.KeyboardEvent>(event: T) => void;\r\n};\r\n\r\nfunction SearchKeywords(props: SearchKeywordsProps): JSX.Element {\r\n    // This functional component is used to localize the search keywords text field\r\n    // This is done because the parent component <SearchPlaylistDetails/>\r\n    // Stores some heavy data (completePlaylistResponse)\r\n    // Which can be very expensive to re render\r\n    \r\n    // Props from parent component\r\n    const {searchPlaylist} = props;\r\n\r\n    return (\r\n        <TextField\r\n            placeholder=\"Search lyrics\"\r\n            fullWidth\r\n            sx={{\r\n                my: 2,\r\n                '& .MuiOutlinedInput-root': {\r\n                    borderRadius: 8,\r\n                    paddingLeft: 2\r\n                }\r\n            }}\r\n            InputProps={{\r\n                startAdornment: (\r\n                    <InputAdornment position='start'><SearchIcon/></InputAdornment>\r\n                )\r\n            }}\r\n            id=\"search-keywords-TextField\"\r\n            onKeyDown={onEnter((e) => {\r\n                // Update parent keywords\r\n                searchPlaylist(e);\r\n            })}\r\n        />\r\n    )\r\n};\r\n\r\nexport default SearchKeywords;","import * as React from 'react';\r\nimport {_parseGetQueryToURLQuery, QueryObject, onEnter} from '../../utils';\r\nimport {API_WEBSITE, SCAN_SONG_ENDPOINT} from './endpoints';\r\nimport {SnackbarStateInterface} from './index';\r\nimport { useTheme, SxProps } from '@mui/material/styles';\r\nimport { SearchPlaylistAPIResponse, LoadCompletePlaylistAPIResponse, ScanSongAPIResponse, Track } from './api_response_types';\r\n// MUI components\r\nimport Box from '@mui/material/Box';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Button from '@mui/material/Button';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\n// Page components\r\nimport ListSongs from './ListSongs';\r\nimport EstimatedTimeRemaining from './EstimatedTimeRemaining';\r\nimport SearchKeywordsTextField from './SearchKeywords';\r\n\r\ninterface SearchPlaylistDetailsInterface {\r\n    playlistURL: string;\r\n    showSnackbar: (newState: Partial<SnackbarStateInterface>) => void;\r\n    setSearchResults: React.Dispatch<React.SetStateAction<SearchPlaylistAPIResponse>>;\r\n    completePlaylistResponse: LoadCompletePlaylistAPIResponse;\r\n}\r\n\r\nfunction SearchPlaylistDetails(props: SearchPlaylistDetailsInterface): JSX.Element {\r\n    /** \r\n     * This is the second step of the searchPlaylist process\r\n     * This component mainly serves the purpose of using fetch API to SCAN SONGS. \r\n     */\r\n\r\n    const {playlistURL, showSnackbar, setSearchResults, completePlaylistResponse} = props;\r\n\r\n    // This state searches for songs individually and stores it in local state before updating to\r\n    // the parent state using setSearchResults\r\n    const [results, setResults] = React.useState<Track[]>([]);\r\n\r\n\r\n    // While the request is in progress\r\n    const [isLoading, setLoading] = React.useState<boolean>(false);\r\n    // Cleanup function \r\n    React.useEffect(() => {\r\n\r\n        return () => {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n    \r\n\r\n    /* \r\n    Instead of searching for ALL the songs in the server, send batch requests to scan songs \r\n    */\r\n    const [songsSearched, setSongsSearched] = React.useState<number>(0);\r\n    const TotalSongsCount = completePlaylistResponse.data?.items.length as number;\r\n    React.useEffect(() => {\r\n        /* \r\n        Since every songs are searched seperately, we need to identify when all the songs have been searched.\r\n        When all has been searched, stop loading, and update search results using setSearchResults\r\n        */\r\n        if (songsSearched === TotalSongsCount) {\r\n            setLoading(false);\r\n\r\n            // Only show success snackbar if atleast 1 song is matched, else show no matches found\r\n            if (results.length > 0) {\r\n                showSnackbar({\r\n                    message: \"Found matches.\",\r\n                    severity: \"success\"\r\n                });\r\n                \r\n                // Only update global results, if there are atleast one matches\r\n                // Prepare and update global search results using setSearchResults\r\n                setSearchResults({\r\n                    status: 200,\r\n                    message: \"Completed search.\",\r\n                    data: results\r\n                });\r\n            } else {\r\n                showSnackbar({\r\n                    message: \"No matches found.\",\r\n                    severity: \"error\"\r\n                })\r\n            }\r\n        \r\n        }\r\n    }, [songsSearched]);\r\n\r\n    // The function which asynchronously searches all songs\r\n    function searchCompletePlaylist<T extends React.MouseEvent | React.KeyboardEvent>(event: T): void {\r\n        event.stopPropagation();\r\n\r\n        // Get keywords\r\n        const SEARCHBAR_TEXTFIELD: HTMLInputElement = document.getElementById(\"search-keywords-TextField\") as HTMLInputElement;\r\n        const keywords: string = SEARCHBAR_TEXTFIELD.value;\r\n\r\n        // Show an error if keywords is empty\r\n        if (keywords === \"\") {\r\n            showSnackbar({\r\n                message: \"Please enter a valid keyword\",\r\n                severity: \"info\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Start fetching\r\n        setLoading(true);\r\n        showSnackbar({\r\n            message: \"Scanning playlist. This may take a while...\",\r\n            severity: \"info\"\r\n        })\r\n\r\n\r\n        // Iterate through each song\r\n        completePlaylistResponse.data?.items.forEach((item) => {\r\n\r\n            // Generate endpoint with parameters\r\n            const parameters: QueryObject = {\r\n                songname: item.name,\r\n                artists: item.artists,\r\n                keywords: keywords\r\n            }\r\n            const _Q: string = _parseGetQueryToURLQuery(parameters);\r\n            const ENDPOINT: string = `${API_WEBSITE}${SCAN_SONG_ENDPOINT}?${_Q}`;\r\n            \r\n            fetch(ENDPOINT, {\r\n                method: \"GET\",\r\n                mode: \"cors\"\r\n            })\r\n            .then((resp) => resp.json())\r\n            .then((response: ScanSongAPIResponse) => {\r\n                /* \r\n                A response status of i means:\r\n                    0   = No lyrics found\r\n                    200 = Lyrics found\r\n                    -1  = An error occured\r\n                */\r\n                if (response.status === 200 && typeof response.data !== 'undefined') {\r\n                    // Lyrics found\r\n                    const responseData: Track = {\r\n                        ...response.data,\r\n                        imageURL: item.imageURL,\r\n                        url: item.url,\r\n                        previewURL: \"javascript:void(0);\"\r\n                    }\r\n                    setResults((prevResults) => [...prevResults, responseData]);\r\n                }\r\n            })\r\n            .catch((e) => {\r\n                showSnackbar({\r\n                    severity: \"error\",\r\n                    message: `An unknown error occured while scanning ${parameters.songname} - ${parameters.artists}`\r\n                });\r\n            })\r\n            .finally(() => {\r\n                setSongsSearched((v) => v+1);\r\n            })\r\n        });\r\n    }\r\n\r\n    // Some styles\r\n    const AppTheme = useTheme();\r\n\r\n    const SearchButtonStyle: SxProps = {\r\n        ...(!isLoading && {\r\n            backgroundImage: `linear-gradient(120deg, ${AppTheme.palette.info.light}, ${AppTheme.palette.info.dark})`\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            {/* Loader */}\r\n            {\r\n                isLoading && (<EstimatedTimeRemaining value={(songsSearched/TotalSongsCount)*100} />)\r\n            }\r\n            \r\n            {/* Search keywords */}\r\n            <Box my={2}>\r\n                <SearchKeywordsTextField searchPlaylist={searchCompletePlaylist}/>\r\n            </Box>\r\n            \r\n            {/* List of songs */}\r\n            <Box>\r\n                {\r\n                    completePlaylistResponse.data?.items && \r\n                    (<ListSongs items={completePlaylistResponse.data?.items}/>)\r\n                }\r\n            </Box>\r\n\r\n            {/* Search button */}\r\n            <Box sx={{position: \"relative\"}}>\r\n                <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    sx={SearchButtonStyle}\r\n                    fullWidth\r\n                    startIcon={<SearchIcon/>}\r\n                    onClick={searchCompletePlaylist}\r\n                    disabled={isLoading}\r\n                >Search playlist</Button>\r\n\r\n                {\r\n                    isLoading && (\r\n                        <CircularProgress \r\n                            color=\"secondary\"\r\n                            size={24}\r\n                            sx={{\r\n                                position: \"absolute\",\r\n                                top: \"50%\",\r\n                                left: \"50%\",\r\n                                marginTop: \"-12px\",\r\n                                marginLeft: \"-12px\"\r\n                            }}\r\n                        />\r\n                    )\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchPlaylistDetails;","import * as React from 'react';\r\nimport { SxProps } from '@mui/material/styles';\r\nimport {LoadCompletePlaylistAPIResponse } from './api_response_types';\r\n// MUI components\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Link from '@mui/material/Link';\r\nimport Typography from '@mui/material/Typography';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport { grey } from '@mui/material/colors';\r\nimport PersonIcon from '@mui/icons-material/Person';\r\n\r\ninterface DisplayPlaylistDetailsInterface {\r\n    completePlaylistDetails: LoadCompletePlaylistAPIResponse;\r\n}\r\n\r\nfunction DisplayPlaylistDetails(props: DisplayPlaylistDetailsInterface): JSX.Element {\r\n    /**\r\n     * This function contains some playlist details that is displayed in step 2 and 3\r\n     */\r\n\r\n    const {completePlaylistDetails} = props;\r\n\r\n    let playlistImage: string, playlistExternalSpotifyURL: string, playlistName: string, playlistDescription: string, playlistOwnerName: string, playlistOwnerURL: string, playlistFollowers: number, playlistSongs: number, playlistOwnerImages: {url: string}[];\r\n\r\n    // Extract details from completePlaylistDetails\r\n    if ((typeof completePlaylistDetails.data?.playlist !== \"undefined\")) {\r\n        playlistImage = completePlaylistDetails.data.playlist.images[0].url;\r\n        playlistExternalSpotifyURL = completePlaylistDetails.data.playlist.external_urls.spotify;\r\n        playlistName = completePlaylistDetails.data.playlist.name;\r\n        playlistDescription = completePlaylistDetails.data.playlist.description;\r\n        playlistOwnerName = completePlaylistDetails.data.playlist.owner.name;\r\n        playlistOwnerURL = completePlaylistDetails.data.playlist.owner.url;\r\n        playlistFollowers = completePlaylistDetails.data.playlist.followers.total;\r\n        playlistSongs = completePlaylistDetails.data.playlist.tracks.total;\r\n        playlistOwnerImages = completePlaylistDetails.data.playlist.owner.images;\r\n        \r\n        // Just make sure that there is ATLEAST one url\r\n        if (playlistOwnerImages.length === 0) {\r\n            playlistOwnerImages = [{url: \"\"}];\r\n        }\r\n\r\n    } else {\r\n        playlistImage = \"\";\r\n        playlistExternalSpotifyURL =  \"\";\r\n        playlistName = \"\";\r\n        playlistDescription = \"\";\r\n        playlistOwnerName = \"\";\r\n        playlistOwnerURL = \"\";\r\n        playlistFollowers = 0;\r\n        playlistSongs = 0;\r\n        playlistOwnerImages = [{url: \"\"}];\r\n        \r\n    }\r\n\r\n\r\n    // Some styles\r\n\r\n    const ImageStyle: React.CSSProperties = {\r\n        maxWidth: \"100%\",\r\n        width: \"200px\",\r\n        height: \"200px\"\r\n    };\r\n\r\n    const LinkStyle: SxProps = {\r\n        color: \"#fff\",\r\n        textDecorationColor: \"#fff\",\r\n        textDecoration: \"none\",\r\n        ':hover': {\r\n            textDecoration: \"underline\"\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <Box>\r\n            {/* Playlist details */}\r\n            <Grid container sx={{backgroundImage: \"linear-gradient(120deg, #1D92B9, #191414)\", py: 2}}>\r\n                {/* Image */}\r\n                <Grid item xs={12} md={4}>\r\n                    <Box display=\"flex\" justifyContent=\"center\">\r\n                        <img alt=\"[Playlist Image]\" src={playlistImage} style={ImageStyle} />\r\n                    </Box>\r\n                </Grid>\r\n\r\n                {/* Playlist details */}\r\n                <Grid item xs={12} md={8}>\r\n                    <Box \r\n                        sx={{\r\n                            height: \"100%\",\r\n                            width: \"100%\",\r\n                            color: \"#fff\"\r\n                        }}\r\n                        p={2}\r\n                    >   \r\n                        {/* Name and description */}\r\n                        <Link href={playlistExternalSpotifyURL} target=\"_blank\" sx={LinkStyle}><Typography variant=\"h4\">{playlistName}</Typography></Link>\r\n                        <Typography color={grey[\"400\"]}>{playlistDescription}</Typography>\r\n                        \r\n                        {/* Profile picture */}\r\n                        <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" flexWrap=\"wrap\" my={1}>\r\n                            <Avatar \r\n                                sx={{backgroundColor: grey[\"700\"], height: 28, width: 28}}\r\n                                src={playlistOwnerImages[0].url}\r\n                            >\r\n                                <PersonIcon fontSize=\"small\"/>\r\n                            </Avatar>\r\n                            <Typography sx={{mx: 1}}>\r\n                                <Link href={playlistOwnerURL} target=\"_blank\" sx={LinkStyle}>{playlistOwnerName}</Link>\r\n                            </Typography>\r\n\r\n                            {\r\n                                playlistFollowers > 0 && (<>• <Typography sx={{mx: 1}}>{playlistFollowers} likes</Typography></>)\r\n                            }\r\n                            \r\n                            • <Typography sx={{mx: 1}}>{playlistSongs} songs</Typography>\r\n                        </Box>\r\n\r\n\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            \r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default DisplayPlaylistDetails;","/* \r\nThis function replaces a string with either a string or a react component and returns an array\r\n*/\r\n\r\ntype ReplacedContentOutput = string | JSX.Element;\r\n\r\nfunction replaceStringWithContent(str: string, regex: string | RegExp, fn: (match?: string) => string | JSX.Element): ReplacedContentOutput[] {\r\n\r\n    // Convert RegExp into a RegExp if its not a RegExp\r\n    if (!(regex instanceof RegExp)) {\r\n        regex = new RegExp(regex, \"g\");\r\n    }\r\n\r\n    // Split the arr at each regex and find matches\r\n    let splittedArr = str.split(regex);\r\n    let matchedContent = str.match(regex);\r\n    let insertedArr: ReplacedContentOutput[] = [];\r\n    let insertedMatchIndex = 0;\r\n    // Insert elements from the splittedArr into the insertedArr\r\n    for (let i = 0; i < splittedArr.length; i++) {\r\n        // If index isnt first or last\r\n        if ((i !== 0) && (i < splittedArr.length) && (matchedContent !== null)) {\r\n            // If a match exists\r\n            if (insertedMatchIndex in matchedContent) {\r\n                insertedArr[insertedArr.length] = fn(matchedContent[insertedMatchIndex]);\r\n            }\r\n            // Increment only if the next var is in matchedContent\r\n            if ((insertedMatchIndex + 1) in matchedContent) {\r\n                insertedMatchIndex++;\r\n            }\r\n        }\r\n        // Append current index regardless\r\n        insertedArr[insertedArr.length] = splittedArr[i];\r\n    }\r\n\r\n    return insertedArr;\r\n}\r\n\r\n\r\nexport type {ReplacedContentOutput as ReplacedContentOutputType};\r\nexport default replaceStringWithContent;","import React from 'react';\r\nimport replaceStringWithContent, {ReplacedContentOutputType} from '../../utils/reactStringReplace';\r\n// MUI\r\nimport Typography from '@mui/material/Typography';\r\n\r\ninterface SnippetContentProps {\r\n    keyword: string;\r\n    snippet: string;\r\n}\r\n\r\n\r\n// The snippet content prop\r\nfunction SnippetContent(props: SnippetContentProps): JSX.Element {\r\n    /* This functional component renders each snippet LINE in the SearchResults -> ListContent component */\r\n    const {keyword, snippet} = props;\r\n\r\n    // Replace \\n with lines, and replace the keyword in each string line with a span tag\r\n    let _lines = replaceStringWithContent(snippet, \"\\n\", () => <br/>);\r\n    let _FinalSnippet: ReplacedContentOutputType[] = [];\r\n\r\n    // Iterate through each lines\r\n    for (let i in _lines) {\r\n        // Only replace for keyword if the current element is a string\r\n        if (typeof _lines[i] === \"string\") {\r\n            // Replace \r\n            const ReplacedContent = replaceStringWithContent(_lines[i] as string, new RegExp(keyword, \"gi\"), (match) => <span style={{textDecoration: \"underline\"}}>{match}</span>);\r\n            // Add on to final snippet\r\n            _FinalSnippet = _FinalSnippet.concat( ReplacedContent );\r\n        } else {\r\n            _FinalSnippet[_FinalSnippet.length] = _lines[i]\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Typography color=\"textSecondary\" sx={{fontStyle: \"italic\"}} fontSize={14}>\r\n            \"{_FinalSnippet.map((each, i) => <React.Fragment key={i}>{each}</React.Fragment>)}\"\r\n        </Typography>\r\n    )\r\n\r\n};\r\n\r\nexport default SnippetContent;","import * as React from 'react';\r\nimport {_parseGetQueryToURLQuery} from '../../utils';\r\nimport { SearchPlaylistAPIResponse, Snippet } from './api_response_types';\r\nimport SnippetContent from './SnippetContent';\r\n// MUI components\r\nimport {SxProps} from '@mui/material/styles';\r\nimport GREEN from '@mui/material/colors/green';\r\nimport Box from '@mui/material/Box';\r\nimport Paper from '@mui/material/Paper';\r\nimport {grey} from '@mui/material/colors';\r\nimport List from '@mui/material/List';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemAvatar from '@mui/material/ListItemAvatar';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Typography from '@mui/material/Typography';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Icon from '@mui/material/Icon';\r\nimport Divider from '@mui/material/Divider';\r\nimport LyricsIcon from '@mui/icons-material/Lyrics';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport MusicNoteIcon from '@mui/icons-material/MusicNote';\r\nimport Link from '@mui/material/Link';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Button from '@mui/material/Button';\r\n\r\n// ListContent Component\r\ninterface ListContentProps {\r\n    name: string;\r\n    artists: string;\r\n    lyrics: string;\r\n    snippets: Snippet[];\r\n    url: string;\r\n    previewURL: string;\r\n    geniusURL: string;\r\n    isLast: boolean;\r\n}\r\n\r\nfunction ListContent(props: ListContentProps): JSX.Element {\r\n    /* This functional component is used by SearchResults to display each item */\r\n\r\n    const {name, artists, lyrics, snippets, url, previewURL, geniusURL, isLast} = props;\r\n\r\n    // Lyrics and dialog functions\r\n    const [open, setOpen] = React.useState<boolean>(false);\r\n    const handleClose = () => { setOpen(false); };\r\n    const _LYRICS = lyrics.split(\"\\n\");\r\n\r\n    // Snippet Container style\r\n    const SnippetContainerStyle: SxProps = {\r\n        my: 1, py: 1, px: 2,\r\n        display: \"inline-block\",\r\n        borderLeft: `4px solid ${GREEN[\"A700\"]}`\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* Song name and artist name */}\r\n            <Typography>{name}</Typography>\r\n            <Typography variant=\"body2\" color=\"textSecondary\">{artists}</Typography>\r\n            \r\n            {/* Snippets */}\r\n            <Paper sx={SnippetContainerStyle}>\r\n                {snippets.map((eachSnippet, index) => (\r\n                    <SnippetContent key={index} keyword={eachSnippet.keyword} snippet={eachSnippet.snippet} />\r\n                ))}\r\n            </Paper>\r\n            \r\n            {/* Links */}\r\n            <Box sx={{mb: 1}}>\r\n                {/* Spotify link */}\r\n                <Button\r\n                    startIcon={<Icon className=\"fab fa-spotify\" />}\r\n                    sx={{\r\n                        backgroundColor: \"#1db954\",\r\n                        ':hover': {\r\n                            backgroundColor: \"#13823A\"\r\n                        }\r\n                    }}\r\n                    variant=\"contained\"\r\n                    href={url}\r\n                    target=\"_blank\"\r\n                >Listen on spotify</Button>\r\n            </Box>\r\n            <Box>\r\n                {/* Read lyrics */}\r\n                <Button\r\n                    startIcon={<LyricsIcon />}\r\n                    sx={{\r\n                        backgroundColor: \"#767676\",\r\n                        \":hover\": {\r\n                            backgroundColor: \"#515151\"\r\n                        }\r\n                    }}\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    onClick={() => { setOpen(true) }}\r\n                >View lyrics</Button>\r\n            </Box>\r\n            \r\n            \r\n            {!isLast && (<Divider sx={{mt: 1}} />)}\r\n\r\n            {/* Dialog for lyrics */}\r\n            <Dialog \r\n                open={open}\r\n                onClose={handleClose}\r\n                fullWidth={true}\r\n                maxWidth=\"lg\"\r\n            >\r\n                <Box sx={{p: 3}}>\r\n                    {/* Title */}\r\n                    <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\" >\r\n                        <MusicNoteIcon/>\r\n                        <Typography variant=\"h4\" sx={{ml: 1}}>Lyrics</Typography>\r\n                        <Box flexGrow={1} />\r\n                        <IconButton onClick={handleClose} ><CloseIcon/></IconButton>\r\n                    </Box>\r\n                    <Typography variant=\"caption\" color=\"textSecondary\">Source: <Link href={geniusURL} target=\"_blank\">Genius.com</Link></Typography>\r\n                   \r\n                    <Divider sx={{mt: 1, mb: 2}} />\r\n                    {/* Song name */}\r\n                    <Typography variant=\"h5\" textAlign=\"center\" sx={{my: 1}}>{name} - {artists}</Typography>\r\n\r\n                    {/* Lyrics */}\r\n                    <Box sx={{backgroundColor: \"#E3E3E3\", p: 1}}>\r\n                        {_LYRICS.map((eachLyrics, i) => {\r\n                            if (eachLyrics === \"\") {\r\n                                return <br key={i}/>\r\n                            } else {\r\n                                return <Typography key={i}>{eachLyrics}</Typography>\r\n                            }\r\n                        })}\r\n                    </Box>\r\n\r\n                    {/* Close button */}\r\n                    <Divider sx={{my: 1}} />\r\n                    <Button color=\"primary\" onClick={handleClose}>Close</Button>\r\n                    \r\n                </Box>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n// Main SearchResults component\r\ninterface SearchResultsInterface {\r\n    searchResults: SearchPlaylistAPIResponse;\r\n}\r\n\r\nfunction SearchResults(props: SearchResultsInterface): JSX.Element {\r\n    /* This functional component displays all the result from the fetch API from the prev step */\r\n    const {searchResults} = props;\r\n\r\n    return (\r\n        <Box>\r\n            <List sx={{\r\n                width: \"100%\",\r\n                my: 1,\r\n                border: `1px solid ${grey[\"300\"]}`,\r\n                py: 1\r\n            }} disablePadding>\r\n            {   \r\n                searchResults.data?.map((eachTrack, index) => (\r\n                    <ListItem alignItems=\"flex-start\" key={index} sx={{py: 0}}>\r\n                        {/* Image */}\r\n                        <ListItemAvatar>\r\n                            <Avatar alt=\"Album cover\" src={eachTrack.imageURL} variant=\"square\" />\r\n                        </ListItemAvatar>\r\n                        {/* Song name with artist names as secondary */}\r\n                        <ListItemText disableTypography>\r\n                            <ListContent\r\n                                name={eachTrack.name}\r\n                                artists={eachTrack.artists}\r\n                                lyrics={eachTrack.lyrics}\r\n                                snippets={eachTrack.snippets}\r\n                                url={eachTrack.url}\r\n                                previewURL={eachTrack.previewURL}\r\n                                geniusURL={eachTrack.geniusURL}\r\n                                isLast={(searchResults.data?.length as number) - 1 === (index)}\r\n                            />\r\n                        </ListItemText>\r\n                    </ListItem>\r\n                ))\r\n            }\r\n            </List>\r\n\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SearchResults;","import React, {useState, useEffect} from 'react';\r\nimport {FadeInWrapper} from '../../utils';\r\nimport {SearchPlaylistAPIResponse, LoadCompletePlaylistAPIResponse} from './api_response_types';\r\n// MUI components\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Divider from '@mui/material/Divider';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Stepper from '@mui/material/Stepper';\r\nimport Step from '@mui/material/Step';\r\nimport StepLabel from '@mui/material/StepLabel';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\nimport Button from '@mui/material/Button';\r\n// Page components\r\nimport Navigation from './Navigation';\r\nimport LoadPlaylist from './LoadPlaylist';\r\nimport SearchPlaylistDetails from './SearchPlaylistDetails'\r\nimport DisplayPlaylistDetails from './DisplayPlaylistDetails';\r\nimport SearchResults from './SearchResults';\r\n\r\n\r\n// Snackbar state interface which will exported to other components in this page\r\nexport interface SnackbarStateInterface {\r\n    open: boolean;\r\n    severity: \"error\" | \"success\" | \"info\" | undefined;\r\n    message: string\r\n}\r\n\r\nfunction SearchPlaylist(): JSX.Element {\r\n    /* This functional component is the main parent component in the search-playlist page */\r\n\r\n    // ============================= SNACKBAR FUNCTIONS=================\r\n    // Snackbar states and detail for displaying messages from the server\r\n    const [snackbarState, setSnackbarState] = useState<SnackbarStateInterface>({\r\n        open: false,\r\n        severity: undefined,\r\n        message: \"\"\r\n    });\r\n\r\n    const showSnackbar = (newState: Partial<SnackbarStateInterface> ) => {\r\n        setSnackbarState({\r\n            ...snackbarState,\r\n            severity: \"success\",\r\n            ...newState,\r\n            open: true\r\n        } as SnackbarStateInterface);\r\n    };\r\n\r\n    const closeSnackbar = () => {\r\n        setSnackbarState({\r\n            ...snackbarState,\r\n            open: false,\r\n            message: \"\"\r\n        } as SnackbarStateInterface);\r\n    }\r\n\r\n    //  ========================== APP DATA ==================================\r\n    const [PLAYLIST_URL, SET_PLAYLIST_URL] = useState<string>(\"\");\r\n    const [completePlaylistDetails, setCompletePlaylistDetails] = useState<LoadCompletePlaylistAPIResponse>(\r\n        {} as LoadCompletePlaylistAPIResponse\r\n    );\r\n    const [searchResults, setSearchResults] = useState<SearchPlaylistAPIResponse>({} as SearchPlaylistAPIResponse);\r\n\r\n    // Listen for updates, and move on to the next step if we receive some data\r\n    // For step 1 {UPDATED}\r\n    useEffect(() => {\r\n        // Update state if data is in the return data from API\r\n        if (\"data\" in completePlaylistDetails) {\r\n            setActiveStep(1);\r\n            setStepStatus({\r\n                ...stepStatus,\r\n                loadCompletePlaylist: true\r\n            } as stepStatusInterface);\r\n        };\r\n    }, [completePlaylistDetails])\r\n\r\n    // For step 2\r\n    useEffect(() => {\r\n        // The \"data\" key contains the tracks\r\n        if (\"data\" in searchResults) {\r\n            setActiveStep(2);\r\n            setStepStatus({\r\n                ...stepStatus,\r\n                searchResults: true\r\n            } as stepStatusInterface);\r\n        }\r\n    }, [searchResults]);\r\n    \r\n\r\n    // ============================ Stepper functions =======================\r\n    type STEPS = 0 | 1 | 2;\r\n    const [activeStep, setActiveStep] = useState<STEPS>(0);\r\n    // stepStatus state contains the status (completed or not) of every step\r\n    interface stepStatusInterface {\r\n        loadCompletePlaylist: boolean; // Step 1\r\n        searchResults: boolean;        // Step 2\r\n    }\r\n    // This step status is for indicating the <Stepper/> content ONLY\r\n    // Only activeStep is used for determing which content to render\r\n    const [stepStatus, setStepStatus] = useState<stepStatusInterface>({\r\n        loadCompletePlaylist: false,  // Step 1\r\n        searchResults: false          // Step 2\r\n    });\r\n\r\n    const isStepperContentInDisplay = (id: STEPS): boolean => activeStep == id;\r\n\r\n    // Go back to the prev step\r\n    const goBackStep = () => {\r\n        if (activeStep === 0) return;\r\n\r\n        // If in 2nd step\r\n        if (activeStep === 1) {\r\n            setActiveStep(0);\r\n            setStepStatus({\r\n                ...stepStatus,\r\n                loadCompletePlaylist: false\r\n            } as stepStatusInterface);\r\n            setCompletePlaylistDetails({} as LoadCompletePlaylistAPIResponse);\r\n        }\r\n\r\n        // If in 3rd step\r\n        if (activeStep === 2) {\r\n            setActiveStep(1);\r\n            setStepStatus({\r\n                ...stepStatus,\r\n                searchResults: false\r\n            } as stepStatusInterface);\r\n            setSearchResults({} as SearchPlaylistAPIResponse);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Box>\r\n                <Paper sx={{m: 1, p: 2, backgroundImage: \"linear-gradient(to bottom, #ECE9E6, #FFFFFF)\"}}>\r\n                    <Navigation/>\r\n\r\n                    <Divider sx={{my: 1}} />\r\n\r\n                    <Box display=\"flex\" alignItems=\"center\" mb={1}>\r\n                        <SearchIcon/>\r\n                        <Typography variant=\"h6\" sx={{ml: 1, textDecoration: \"underline\"}}>Search playlist</Typography>\r\n                    </Box>\r\n                    \r\n                    {/* Contents */}\r\n                    <Box my={1}>\r\n                        {/* Steppers */}\r\n                        <Box my={2}>\r\n                            <Stepper activeStep={activeStep}>\r\n                                {/* First step - Load playlist */}\r\n                                <Step completed={stepStatus.loadCompletePlaylist}>\r\n                                    {/* Label */}\r\n                                    <StepLabel>\r\n                                        Load a playlist\r\n                                    </StepLabel>\r\n                                </Step>\r\n\r\n                                {/* Second step - Enter search term */}\r\n                                <Step completed={stepStatus.searchResults}>\r\n                                    {/* Label */}\r\n                                    <StepLabel>\r\n                                        Search lyrics\r\n                                    </StepLabel>\r\n                                </Step>\r\n\r\n                                {/* 3rd step - Songs found */}\r\n                                <Step completed={false}>\r\n                                    {/* Label */}\r\n                                    <StepLabel>\r\n                                        Songs found\r\n                                    </StepLabel>\r\n                                </Step>\r\n                            </Stepper>\r\n                        </Box>\r\n\r\n                        {/* Step content */}\r\n                        <Box>\r\n                            {/* Step 1 - Load playlist */}\r\n                            {\r\n                                isStepperContentInDisplay(0) && (\r\n                                    <FadeInWrapper>\r\n                                        <LoadPlaylist\r\n                                            playlistURL={PLAYLIST_URL}\r\n                                            setPlaylistURL={SET_PLAYLIST_URL}\r\n                                            showSnackbar={showSnackbar}\r\n                                            setCompletePlaylistDetails={setCompletePlaylistDetails}\r\n                                        />\r\n                                    </FadeInWrapper>\r\n                                )\r\n                            }\r\n\r\n                            {/* Step 2 - Search the playlist for lyrics */}\r\n                            {\r\n                                isStepperContentInDisplay(1) && (\r\n                                    <FadeInWrapper>\r\n                                        <React.Fragment>\r\n                                            <DisplayPlaylistDetails\r\n                                                completePlaylistDetails={completePlaylistDetails}\r\n                                            />\r\n                                            <SearchPlaylistDetails\r\n                                                playlistURL={PLAYLIST_URL}\r\n                                                showSnackbar={showSnackbar}\r\n                                                setSearchResults={setSearchResults}\r\n                                                completePlaylistResponse={completePlaylistDetails}\r\n                                            />\r\n                                        </React.Fragment>\r\n                                    </FadeInWrapper>\r\n                                )\r\n                            }\r\n\r\n                            {/* Step 3 - Display search results */}\r\n                            {\r\n                                isStepperContentInDisplay(2) && (\r\n                                    <FadeInWrapper>\r\n                                        <React.Fragment>\r\n                                            <DisplayPlaylistDetails\r\n                                                completePlaylistDetails={completePlaylistDetails}\r\n                                            />\r\n                                            <SearchResults\r\n                                                searchResults={searchResults}\r\n                                            />\r\n                                        </React.Fragment>\r\n                                    </FadeInWrapper>\r\n                                )\r\n                            }\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    {/* Go back button */}\r\n                    {activeStep > 0 && (\r\n                        <React.Fragment>\r\n                            <Divider sx={{my: 2}} />\r\n                            <Box display=\"flex\" flexDirection=\"row\">\r\n                                <Button color=\"primary\" onClick={goBackStep}>Go back</Button>\r\n                            </Box>\r\n                        </React.Fragment>\r\n                    )}\r\n                </Paper>\r\n            </Box>\r\n            \r\n\r\n            {/* Snackbar for messages from server */}\r\n            <Snackbar\r\n                open={snackbarState.open}\r\n                autoHideDuration={6000}\r\n                onClose={closeSnackbar}\r\n                anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"center\"\r\n                }}\r\n            >\r\n                <Alert variant=\"filled\" onClose={closeSnackbar} severity={snackbarState.severity}>\r\n                    {snackbarState.message}\r\n                </Alert>\r\n            </Snackbar>\r\n            \r\n        </Container>\r\n        \r\n    )\r\n}\r\n\r\nexport default SearchPlaylist;"],"names":["navigateHook","useNavigate","navigationType","useNavigationType","Tooltip","title","placement","Button","startIcon","ArrowBack","onClick","event","preventDefault","sx","theme","backgroundImage","palette","primary","light","secondary","dark","variant","API_WEBSITE","props","playlistURL","setPlaylistURL","showSnackbar","setCompletePlaylistDetails","React","isLoading","setIsLoading","AppTheme","useTheme","LoadingButtonSx","success","loadPlaylist","QUERY","url","_query","_parseGetQueryToURLQuery","URL","fetch","method","mode","then","response","json","status","message","severity","catch","e","finally","Box","TextField","value","onChange","target","placeholder","fullWidth","my","borderRadius","paddingLeft","InputProps","startAdornment","InputAdornment","position","Search","onKeyDown","onEnter","color","SystemUpdateAlt","disabled","CircularProgress","size","top","left","marginTop","marginLeft","songName","artists","useState","modal","setModal","isLyricsLoaded","setIsLyricsLoaded","undefined","lyrics","setLyrics","geniusURL","setGeniusURL","useEffect","_Q","songname","query","data","handleClose","Lyrics","backgroundColor","Dialog","open","onClose","maxWidth","p","display","flexDirection","alignItems","MusicNote","Typography","ml","flexGrow","IconButton","Close","Boolean","Link","href","Divider","mt","mb","textAlign","map","i","Skeleton","animation","height","width","split","items","List","border","GREY","py","disablePadding","each","ListItem","ListItemAvatar","Avatar","alt","src","imageURL","ListItemText","name","Icon","className","length","LoaderStyle","linearProgressClasses","grey","LinearProgress","searchPlaylist","id","setSearchResults","completePlaylistResponse","results","setResults","setLoading","songsSearched","setSongsSearched","TotalSongsCount","searchCompletePlaylist","stopPropagation","keywords","document","getElementById","forEach","item","parameters","ENDPOINT","resp","responseData","previewURL","prevResults","v","SearchButtonStyle","info","playlistImage","playlistExternalSpotifyURL","playlistName","playlistDescription","playlistOwnerName","playlistOwnerURL","playlistFollowers","playlistSongs","playlistOwnerImages","completePlaylistDetails","playlist","images","external_urls","spotify","description","owner","followers","total","tracks","LinkStyle","textDecorationColor","textDecoration","Grid","container","xs","md","justifyContent","style","flexWrap","Person","fontSize","mx","str","regex","fn","RegExp","splittedArr","matchedContent","match","insertedArr","insertedMatchIndex","keyword","snippet","_lines","replaceStringWithContent","_FinalSnippet","ReplacedContent","concat","fontStyle","ListContent","snippets","isLast","setOpen","_LYRICS","SnippetContainerStyle","px","borderLeft","GREEN","Paper","eachSnippet","index","eachLyrics","searchResults","eachTrack","disableTypography","snackbarState","setSnackbarState","newState","closeSnackbar","PLAYLIST_URL","SET_PLAYLIST_URL","setActiveStep","setStepStatus","stepStatus","loadCompletePlaylist","activeStep","isStepperContentInDisplay","Container","m","Stepper","Step","completed","StepLabel","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","Alert"],"sourceRoot":""}